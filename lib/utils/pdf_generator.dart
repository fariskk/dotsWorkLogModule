import 'dart:io';
import 'package:dots_ticcket_module/common/common.dart';
import 'package:dots_ticcket_module/features/myWorks/provider/my_works_provider.dart';
import 'package:flutter/services.dart';
import 'package:open_file/open_file.dart';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart';

class PdfGenerator {
  static Future<bool> generatePdf(
      {required MyWorksProvider provider,
      required List works,
      required String empName,
      required String email,
      required String designation}) async {
    try {
      ByteData byteData = await rootBundle.load('assets/dots_logo.jpg');

      Uint8List imageBytes = byteData.buffer.asUint8List();
      Document pdf = Document();
      pdf.addPage(MultiPage(
          margin: const EdgeInsets.symmetric(horizontal: 40, vertical: 20),
          header: (context) {
            if (context.pageNumber != 1) {
              return SizedBox();
            }
            return Container(
                margin: const EdgeInsets.only(bottom: 10),
                width: 600,
                child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            SizedBox(height: 30),
                            if (provider.selectedTypeForSort != "All")
                              myPdfText(
                                  "Type : ${provider.selectedTypeForSort}"),
                            if (provider.selectedPriorityForSort != "All")
                              myPdfText(
                                  "Priority : ${provider.selectedPriorityForSort} Priority"),
                            if (provider.selectedStatusForSort != "All")
                              myPdfText(
                                  "Status : ${provider.selectedStatusForSort}"),
                          ]),
                      Column(children: [
                        myPdfText("Work Report",
                            fontSize: 16, fontWeight: FontWeight.bold),
                        SizedBox(height: 5),
                        myPdfText(
                            "${toDDMMMYYY(works.first["START_DATE"])} To ${toDDMMMYYY(works.last["END_DATE"])}",
                            fontSize: 8,
                            fontWeight: FontWeight.bold),
                      ]),
                      Column(children: [])
                    ]));
          },
          footer: (context) {
            return Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  myPdfText("Generated By:\nDots go+"),
                  Row(children: [
                    myPdfText("Powered By  "),
                    Image(
                        MemoryImage(
                          imageBytes,
                        ),
                        height: 10,
                        width: 20),
                  ]),
                  myPdfText(
                      "Generated On:\n${toDDMMMYYY(getDate(DateTime.now()))}"),
                ]);
          },
          build: (context) {
            dynamic dataTable = getTableData(works);
            const chartColors = [
              PdfColors.green300,
              PdfColors.blue300,
              PdfColors.orange300,
              PdfColors.red300,
            ];
            return [
              Row(children: [
                Container(
                  height: 170,
                  width: 250,
                  child: Chart(
                    grid: PieGrid(),
                    datasets: List<Dataset>.generate(dataTable.length, (index) {
                      final data = dataTable[index];
                      final color = chartColors[index % chartColors.length];
                      final value = (data[1] as num).toDouble();
                      final pct = data[1].toInt();
                      return PieDataSet(
                        legend: '${data[0]} ($pct)',
                        legendPosition: data[1] > 0
                            ? PieLegendPosition.outside
                            : PieLegendPosition.none,
                        value: value,
                        color: color,
                        legendStyle: const TextStyle(fontSize: 8),
                      );
                    }),
                  ),
                ),
                Container(
                    width: 250,
                    height: 170,
                    child: Center(
                        child: Table(
                            border: TableBorder.all(
                                width: .3, color: PdfColors.grey300),
                            tableWidth: TableWidth.min,
                            children: [
                          TableRow(children: [
                            Container(
                              color: PdfColors.grey200,
                              child: myPdfText("Name"),
                            ),
                            Container(
                              color: PdfColors.grey50,
                              child: myPdfText(empName),
                            ),
                          ]),
                          TableRow(children: [
                            Container(
                              color: PdfColors.grey200,
                              child: myPdfText("Email"),
                            ),
                            Container(
                              color: PdfColors.grey50,
                              child: myPdfText(email),
                            ),
                          ]),
                          TableRow(children: [
                            Container(
                              color: PdfColors.grey200,
                              child: myPdfText("Designation"),
                            ),
                            Container(
                              color: PdfColors.grey50,
                              child: myPdfText(designation),
                            ),
                          ]),
                        ])))
              ]),
              Table(
                  columnWidths: {
                    0: const FixedColumnWidth(10),
                    1: const FixedColumnWidth(15),
                    2: const FixedColumnWidth(20),
                    3: const FixedColumnWidth(12),
                    4: const FixedColumnWidth(10),
                    5: const FixedColumnWidth(10),
                    6: const FixedColumnWidth(13),
                    7: const FixedColumnWidth(12),
                    8: const FixedColumnWidth(14),
                    9: const FixedColumnWidth(25),
                    10: const FixedColumnWidth(12),
                    11: const FixedColumnWidth(20),
                  },
                  defaultVerticalAlignment: TableCellVerticalAlignment.middle,
                  border: TableBorder.all(color: PdfColors.black, width: .5),
                  children: <TableRow>[
                        TableRow(
                            verticalAlignment:
                                TableCellVerticalAlignment.middle,
                            decoration:
                                const BoxDecoration(color: PdfColors.grey300),
                            children: [
                              myPdfText("Task ID"),
                              myPdfText("Client Name"),
                              myPdfText("Task Name"),
                              myPdfText("Assigned  by"),
                              myPdfText("Start Date"),
                              myPdfText("Due Date"),
                              myPdfText("Delivery Date"),
                              myPdfText("Priority"),
                              myPdfText("Status"),
                              myPdfText("Comments"),
                              myPdfText("Progress (%)"),
                              myPdfText("Dependencies"),
                            ])
                      ] +
                      List.generate(works.length, (index) {
                        Map work = works[index];
                        return TableRow(children: [
                          myPdfText(work["WORKID"].toString()),
                          myPdfText(work["CLIENT"].toString()),
                          myPdfText(work["TASK_NAME"]),
                          myPdfText(work["ASSIGNED_BY"].toString()),
                          myPdfText(work["START_DATE"]),
                          myPdfText(work["END_DATE"]),
                          myPdfText(work["END_DATE"]),
                          myPdfText(getPriorityInString(work["PRIORITY_LOW"],
                              work["PRIORITY_MID"], work["PRIORITY_HIGH"])),
                          myPdfText(work["WORK_STATUS"]),
                          myPdfText(work["WORK_NOTES"]),
                          myPdfText(work["PROGRESS"].toString()),
                          myPdfText(work["DEPENDENCIES"]),
                        ]);
                      }))
            ];
          }));

      final dir = await getExternalStorageDirectory();
      File file = File("${dir!.path}/my_works.pdf");
      await file.writeAsBytes(await pdf.save());
      return await OpenFile.open(file.path).then((result) {
        if (result.message == "done") {
          return true;
        }

        return false;
      });
    } catch (e) {
      return false;
    }
  }
}

Container cell(PdfColor color, String value) {
  return Container(
      height: 20,
      width: 70,
      color: color,
      child: Center(child: myPdfText(value)));
}

Container myPdfText(String text,
    {double? fontSize = 5, FontWeight? fontWeight, PdfColor? color}) {
  return Container(
      padding: const EdgeInsets.all(3),
      child: Text(text,
          textAlign: TextAlign.start,
          style: TextStyle(
              color: color, fontSize: fontSize, fontWeight: fontWeight)));
}

getTableData(List works) {
  int totalWorks = works.length;
  List pdfChartValues = [];
  pdfChartValues.add(works
      .where((element) => element["WORK_STATUS"] == "COMPLETED")
      .toList()
      .length
      .toDouble());
  pdfChartValues.add(works
      .where((element) => element["WORK_STATUS"] == "PENDING")
      .toList()
      .length
      .toDouble());
  pdfChartValues.add(works
      .where((element) => element["WORK_STATUS"] == "ON_HOLD")
      .toList()
      .length
      .toDouble());
  pdfChartValues.add(works
      .where((element) => getDateDiffrence(element["END_DATE"]) < 1)
      .toList()
      .length
      .toDouble());

  return [
    [
      'Completed',
      pdfChartValues[0],
      totalWorks,
    ],
    [
      'In Progress',
      pdfChartValues[1],
      totalWorks,
    ],
    [
      'On Hold',
      pdfChartValues[2],
      totalWorks,
    ],
    [
      'Overdue',
      pdfChartValues[3],
      totalWorks,
    ],
  ];
}
